<?php

/*
 * This file is part of the pinepain/php-weak-lib PHP library.
 *
 * Copyright (c) 2016 Bogdan Padalko <zaq178miami@gmail.com>
 *
 * Licensed under the MIT license: http://opensource.org/licenses/MIT
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code or visit http://opensource.org/licenses/MIT
 */

namespace Weak;

use RuntimeException;
use SplObjectStorage;

class WeakValueMap extends SplObjectStorage
{
    /** {@inheritdoc} */
    public function attach($object, $data = null)
    {
        $this->validateInfo($data);

        $data = new Reference($data, function () use ($object) {
            $this->detach($object);
        });

        parent::attach($object, $data);
    }

    /** {@inheritdoc} */
    public function addAll($storage)
    {
        foreach ($storage as $obj) {
            $this->attach($obj, $storage[$obj]);
        }
    }

    /** {@inheritdoc} */
    public function getInfo()
    {
        $info = parent::getInfo(); // TODO: Change the autogenerated stub

        if ($info instanceof Reference) {
            $info = $info->get();
        }

        return $info;
    }

    /** {@inheritdoc} */
    public function setInfo($data)
    {
        $this->validateInfo($data);

        $object = $this->current();

        if (!$object) {
            return; // nothing to do
        }

        $data = new Reference($data, function () use ($object) {
            $this->detach($object);
        });

        parent::setInfo($data);
    }

    /** {@inheritdoc} */
    public function offsetSet($object, $data = null)
    {
        $this->attach($object, $data);
    }

    /** {@inheritdoc} */
    public function offsetGet($object)
    {
        $info = parent::offsetGet($object); // TODO: Change the autogenerated stub

        if ($info instanceof Reference) {
            $info = $info->get();
        }

        return $info;
    }

    protected function validateInfo($data)
    {
        if (!is_object($data)) {
            throw new RuntimeException(self::class . ' expects data to be object, ' . gettype($data) . ' given');
        }
    }
}
